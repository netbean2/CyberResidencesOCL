-------------------------------------------------------------------------------
--                           CyberResidencesOCL.use
-------------------------------------------------------------------------------

model CyberResidences


enum Category {
    economy,
    standard,
    premium,
    prestige
}


enum Gender {
    male,
    female
}


class Residence
attributes
    name     : String
    floorMin : Integer
    floorMax : Integer
    category : Category
    maxNbOfFreeUnits : Integer -- @derived
    avgRate : Real             -- @derived
operations
    -- Set of bedrooms of the residence.
    bedrooms() : Set(Bedroom) =
        rooms->select(oclIsKindOf(Bedroom))->oclAsType(Set(Bedroom))
    -- Set of useful bedrooms.
    usefulBedrooms() : Set(Bedroom) =
        bedrooms()->select(not isOutOfOrder)
    -- Set of residence bathrooms
    bathrooms() : Set(Bathroom) =
        rooms->select(oclIsKindOf(Bathroom))->oclAsType(Set(Bathroom))
end

class Room
attributes
    number : Integer
    floor : Integer -- @derived
    isOutOfOrder : Boolean
end


class Bathroom < Room
attributes
    isOnTheLanding : Boolean
end

class Bedroom < Room
attributes
    nbOfSingleBeds : Integer
    nbOfDoubleBeds : Integer
    rate : Real
    isNonSmoking : Boolean
    nbOfUnits : Integer -- @derived
end


class Person
attributes
  name : String
  age : Integer
  gender : Gender
end

class Resident < Person
attributes
  isSmoker : Boolean
end

class Tenant < Resident
attributes
    paidRate : Real -- @derived
end

class Discount
attributes
  percentage : Integer
  label : String
end    

associationclass Rent
between
    Bedroom[1..*] role rentedBedrooms
    Tenant[0..1] role tenant
attributes
    discount : Real -- @derived
    rate : Real -- @derived
end


composition ContainsRooms between
  Residence[1] role residence
  Room[*] role rooms
end

composition HasDiscounts between
  Rent[1] role rent
  Discount[*] role discounts
end

association IsInBedroom between
  Bathroom[0..3] role bathrooms
  Bedroom[0..1] role bedroom
end

association IsOccupiedBy between
  Bedroom[1] role occupiedRoom
  Resident[*] role occupants
end

association IsMarriedWith between
  Resident[0..1] role consort
  Resident[0..1]
end

association IsTutoredBy between
  Resident[0..2] role tutors
  Resident[*] role tutored
end

-- TODO

-- For association classes use the following syntax
-- (see documentation for more details)
-- associationclass ... between
--     ...[...] role ...
--     ...[...] role ...
-- attributes
--     ...
-- end


constraints

-------------------------------------------------------------------------------
--DONE                               aboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "All Bathrooms Out Of Order" (ABOOO).
-- Note Easy. Use 'one'. Should world with 'xxxPercentage'

context Rent inv aboooConditions:
    --select all bathrooms that are out of order check that the number of bathroom out of order = the number total number of bathroom
    --if true it implies that it exist a discount with the right label
    self.rentedBedrooms.bathrooms.select(br | br.isOutOfOrder)->size() = self.rentedBedrooms.bathrooms->size()
    implies
    self.discounts.exists(d | d.label = 'BROOO50')
    -- A discount is given for bedrooms that have all bathrooms out of
    -- order. The label of this type of discount is 'BROOO50'. This
    -- rule does not apply in economy residences.

-------------------------------------------------------------------------------
--DONE test-ok-ko                              aboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "ABOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'

context Discount inv aboooPercentage:
    -- ABOO discounts are equal to 50%.
    self.label = 'BROOO50' implies self.percentage=50


-------------------------------------------------------------------------------
--DONE test-ok-ko                               adultMarried
-------------------------------------------------------------------------------
-- Only adult married.
-- Easy. Use 'implies'

context Resident inv adultMarried:
    self.consort->notEmpty() implies self.age >= 18 and self.consort.age>=18
    -- To be registered as married, resident must be adult.


-------------------------------------------------------------------------------
--DONE test-ok-ko                               adultTenant
-------------------------------------------------------------------------------
-- Tenants are adults.
-- Easy

-- The minimal age to rent a bedroom is 18 years old.
context Tenant inv adultTenant:
    self.age >= 18


-------------------------------------------------------------------------------
--DONE test-ok-ko                            allPrestigeBathrooms
-------------------------------------------------------------------------------
-- Invariant about all bathrooms for 'prestige' residence.
-- Medium. use 'implies'.

context Residence inv allPrestigeBathrooms:
    -- Residences of category prestige have in each bedroom at least
    -- the same number of bathroom that the number of beds.
    self.category=Category::prestige implies self.bedrooms()->forAll(b | (b.nbOfSingleBeds+b.nbOfDoubleBeds)<=b.bathrooms->size())



-------------------------------------------------------------------------------
--DONE TEST-OK-KO                               atLeastABed
-------------------------------------------------------------------------------
-- At least one bed for useful bedrooms.
-- Easy. Use implies.

context Bedroom inv atLeastABed:
    not self.isOutOfOrder implies ((self.nbOfSingleBeds+self.nbOfDoubleBeds)>=1)
    -- Bedrooms that are not out of order must have at least one bed.


-------------------------------------------------------------------------------
--DONE test-ok-ko                          atLeastOneAdult
-------------------------------------------------------------------------------
-- At least one adult per room.
-- Easy. Use 'implies'

context Bedroom inv atLeastOneAdult:
    -- At least one adult must be presented in all occupied rooms.
    self.occupants->size() <> 0 implies self.occupants->select(age>=18)->notEmpty()


-------------------------------------------------------------------------------
--DONE TEST-OK-KO                              childNonSmoking
-------------------------------------------------------------------------------
-- Non smoking child.
-- Easy


context Resident inv childNonSmoking:
    self.age < 18 implies not self.isSmoker
    -- Children are always declared as non smoker.


-------------------------------------------------------------------------------
--DONE test-ok-ko                                childTutored
-------------------------------------------------------------------------------
-- Child tutored.
-- Medium

context Resident inv childTutored:
    -- Resident that are less than 18 years old must have at least one
    -- tutor, apart in prestige residences where this rule does not
    -- apply.
    self.age<18 and self.occupiedRoom.residence.category<>Category::prestige 
    implies
    self.tutors->notEmpty()


-------------------------------------------------------------------------------
--TOCKECK                              cumulatedDiscounts
-------------------------------------------------------------------------------
-- Limit of cumulated discounts.
-- Easy. Use 'sum'

context Rent inv cumulatedDiscounts:
    -- No room will have more that 70% of dicounts cumulated.
    self.discounts-> collect(percentage)->sum() <= 70


-------------------------------------------------------------------------------
-- UNDONE                               deriveAvgRate
-------------------------------------------------------------------------------
-- Derivation of the avgRate attribute.
-- Medium

-- context Residence inv deriveAvgRate:
    -- The average rate of a residence is the total revenue of the
    -- residence divided by the number of occupants. Tutored residents
    -- do not count in this rule.


-------------------------------------------------------------------------------
--TOCKECK                                deriveDiscount
-------------------------------------------------------------------------------
-- Derivation of the attribute discount.
-- Easy

context Rent inv deriveDiscount:
    -- The discount for a rent, is the rate of the bedroom multiplied
    -- by the sum of percentages of all discounts.
    self.discount=self.rentedBedrooms.rate*(self.discounts->collect(percentage))->sum()

-------------------------------------------------------------------------------
--DONE test-ok-ko                                 deriveFloor
-------------------------------------------------------------------------------
-- Derivation of the attribute floor.
-- Easy

context Room inv deriveFloor:
    self.floor = self.number div 100
    -- The floor number correspond to the first digits of the room
    -- number, where the last two digits are removed. For instance the
    -- room 634 is at the floor 6.


-------------------------------------------------------------------------------
--DONE TEST-OK-KO deriveIsOnTheLanding
-------------------------------------------------------------------------------
-- Derivation of isOnTheLanding attribute.
-- Easy
context Bathroom inv deriveIsOnTheLanding:
    self.isOnTheLanding implies self.bedroom->isEmpty()
-- A bathroom is said to be on the landing if it is not in a
-- bedroom.


-------------------------------------------------------------------------------
-- DONE/TO DECIDE                           deriveMaxNbOfFreeUnits
-------------------------------------------------------------------------------
--Derivation of maxNbOfFreeUnits attribute.
-- Easy
context Residence inv deriveMaxNbOfFreeUnits:
    self.bedrooms()->notEmpty() implies (self.maxNbOfFreeUnits = (self.bedrooms().nbOfDoubleBeds->sum()+self.bedrooms().nbOfDoubleBeds->sum()+self.bedrooms().nbOfSingleBeds->sum()))
    --self.maxNbOfFreeUnits=self.usefulBedrooms().nbOfUnits->sum()
    -- The maximum number of free units is equal to the maximum number
    -- of places in beds of all rooms of the residence.

-------------------------------------------------------------------------------
--DONE test-ok-ko 								deriveNbOfUnits
-------------------------------------------------------------------------------
-- Derivation of nbOfUnits attribute.
-- Easy
context Bedroom inv deriveNbOfUnits:
    self.nbOfUnits = self.nbOfSingleBeds+2*nbOfDoubleBeds
-- The number of units of a bedroom is the maximum number of
-- people that can fit within the bedroom assuming that all places
-- in all beds are full.



-------------------------------------------------------------------------------
-- UNDONE                               derivePaidRate
-------------------------------------------------------------------------------
-- Derivation of the attribute paidRate.
-- Not Easy. Use 'if ... then ... else ... endif'   and
-- 'let groupFloors : Set(Integer) = ... in ...'

-- context Tenant inv derivePaidRate:
    -- The total amount paid by a tenant is the sum of rent rates for
    -- all bedrooms rented. If the members of his or her group is
    -- spread over more than one floor, then 20€ of reduction will
    -- automatically be deduced.


-------------------------------------------------------------------------------
--TOCHECK/TO DECIDE 							deriveRate
-------------------------------------------------------------------------------
-- Derivation of the attribute rate.
-- Easy
context Rent inv deriveRate:
   self.rate = self.rentedBedrooms.rate-(self.discount/100)*self.rentedBedrooms.rate
   --self.rate = self.rentedBedrooms.rate-self.discount
-- The rate of a rent corresponds to the regular rate for the room
-- minus the discount.


-------------------------------------------------------------------------------
--DONE 							domainPercentage
-------------------------------------------------------------------------------
-- Domain of percentage attribute.
-- Easy
context Discount inv domainPercentage:
    self.percentage<=100 and self.percentage>=1
-- The percentage is a value between 1 and 100.


-------------------------------------------------------------------------------
--DONE/TO DECIDE 						enoughBathroomsInPrestige
-------------------------------------------------------------------------------
-- At least as many bathrooms than beds for prestige residence.
-- Easy. Use implies.
context Bedroom inv enoughBathroomsInPrestige:
    self.residence.category=Category::prestige implies self.residence.bathrooms()->size()>=(self.nbOfSingleBeds+nbOfDoubleBeds)
    --self.residence.category=Category::prestige implies self.residence.bathrooms()->collect(isOnTheLanding=false)->size()>=(self.nbOfSingleBeds+self.nbOfDoubleBeds)
-- In a prestige residence, the number of private bathrooms is at
-- least the same as the number of beds in each bedroom.


-------------------------------------------------------------------------------
--DONE TEST-OK-KO 				floorBetweenMinAndMax
-------------------------------------------------------------------------------
-- Floor between minimum and maximum floors.
-- Easy
context Room inv floorBetweenMinAndMax:
    self.floor<=self.residence.floorMax and self.floor>=self.residence.floorMin
-- The floor of a room is between the minium and maximum floor of
-- the residence.


-------------------------------------------------------------------------------
--DONE TEST-OK-KO 					floorOrder
-------------------------------------------------------------------------------
-- Order between floorMin and floorMax attributes.
-- Easy
context Residence inv floorOrder:
    self.floorMax>=self.floorMin
-- The maximum floor is at higher or at the same level that the
-- minimum floor of the residence.

-------------------------------------------------------------------------------
--TOCHECK 							labelUnique
-------------------------------------------------------------------------------
-- Uniqueness of labels with respect to rents.
-- Easy. Use 'unique'
context Rent inv labelUnique:
    self.discounts->isUnique(label)
-- All discounts associated to a rent have distinct labels.


-------------------------------------------------------------------------------
--TOCKECK 						marriageAntiReflexivity
-------------------------------------------------------------------------------
-- Anti-reflexivity of marriage relationship.
-- Easy
context Resident inv marriageAntiReflexivity:
    self.consort->notEmpty() implies self.consort<>self
-- A resident cannot mary with himself or herself.


-------------------------------------------------------------------------------
-- DONE                           marriageInSameGroup
-------------------------------------------------------------------------------
-- Consorts in the same group.
-- Medium

context Resident inv marriageInSameGroup:
    -- A resident and his or her consort occupies a room of the same
    -- group.
    --self.consort->notEmpty() implies self.occupiedRoom=self.consort.occupiedRoom
    self.consort->notEmpty() implies self.occupiedRoom.tenant.rentedBedrooms.occupants->exists(p|p=self.consort)


-------------------------------------------------------------------------------
--TOCHECK                               marriageSymmetry
-------------------------------------------------------------------------------
-- Symmetry of marriage relationship.
-- Easy

context Resident inv marriageSymmetry:
    -- If a resident is declared to be the consort of another
    -- resident, then the opposite is true as well.
    self.consort->notEmpty() implies self.consort.consort=self


-------------------------------------------------------------------------------
--DONE/TO DECIDE                              noBedroomOverload
-------------------------------------------------------------------------------
-- No bedroom overloaded.
-- Medium

context Bedroom inv noBedroomOverload:
    -- There must be no more people in a bedroom that the number of
    -- units of this bedroom. Children up to 3 years old are not
    -- counted in this rule.
    self.occupants->select(age>3)->size()=self.nbOfUnits
    --self.occupants->select(age>3)->size()<=self.nbOfUnits


-------------------------------------------------------------------------------
--DONE test-ok-ko                           noEmptyRentedBedrooms
-------------------------------------------------------------------------------
-- Rented bedrooms not empty.
-- Easy. Use 'implies'

context Bedroom inv noEmptyRentedBedrooms:
    -- All rented bedrooms are occupied by at least one occupant.
    self.tenant->notEmpty() implies self.occupants->notEmpty()

-------------------------------------------------------------------------------
--DONE                                  noSquaters
-------------------------------------------------------------------------------
-- Nobody in rooms not rented.
-- Easy. Use 'implies'

context Bedroom inv noSquaters:
    -- Occupants must be exclusively in rooms that are rented by
    -- somebody.
    self.occupants->notEmpty() implies self.tenant->notEmpty()


-------------------------------------------------------------------------------
--DONE test-ok-ko                      noTutorForAdults
-------------------------------------------------------------------------------
-- No tutor for adults.
-- Easy

context Resident inv noTutorForAdults:
    -- Adults never have tutor.
    self.age>=18 implies tutored->isEmpty()


-------------------------------------------------------------------------------
--DONE test-ok-ko                             oooBedroomsNotRented
-------------------------------------------------------------------------------
-- No rental of Out Of Order bedrooms.
-- Easy

context Bedroom inv oooBedroomsNotRented:
    -- Bedrooms that are out of order cannot be rented.
    self.isOutOfOrder implies self.tenant = null


-------------------------------------------------------------------------------
--DONE test ok-ko                                oooIfPrestige
-------------------------------------------------------------------------------
-- Out of order bathroom implications if prestige. 
-- Medium. Use 'implies'

context Bathroom inv oooIfPrestige:
    -- In prestige residences, it is not acceptable to rent bedrooms
    -- with bathrooms that are out of order. So if a bathrom is marked
    -- as out of order, the corresponding bedroom is also marked as
    -- out of order.
    self.isOutOfOrder and self.residence.category=Category::prestige
    implies
    self.bedroom.isOutOfOrder


-------------------------------------------------------------------------------
--DONE/TO CHECK                              rentInOneResidence
-------------------------------------------------------------------------------
-- Medium. Should be rather short.
-- <Enter note text here>

context Tenant inv rentInOneResidence:
    -- For a given tenant, all rented bedrooms are in the same
    self.rentedBedrooms->forAll(b | self.rentedBedrooms->forAll(b2 | b.residence=b2.residence))


-------------------------------------------------------------------------------
--DONE test-ok-ko                            sameNumberIfPrivate
-------------------------------------------------------------------------------
-- Same number if private.
-- Easy. Use 'implies'.

context Bathroom inv sameNumberIfPrivate:
    -- All bathrooms that are not on the landing, that is that are
    -- private to a bedroom, have the same number of room as this
    -- bedroom.
    not self.isOnTheLanding implies self.bedroom.number=self.number


-------------------------------------------------------------------------------
-- DONE                              sboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "Some Bathrooms Out Of Order" (SBOOO).
-- Not Easy. Use 'one'. Should world with 'xxxPercentage'

context Rent inv sboooConditions:
    -- A discount if given for a bed room if there are "Some Bathrooms
    -- Out Of Order", that is for bedroom with at least one bathroom
    -- out of order, but at least one bathroom still available.  The
    -- label for this type of discount is SBOO. This type of discount
    -- does not apply on economy residences.
    --nb of bathroom OOO is inf to total nb of bathroom
    self.rentedBedrooms.bathrooms.select(br | br.isOutOfOrder)->size() < self.rentedBedrooms.bathrooms->size() 
    --At least one bathoom OOO
    and self.rentedBedrooms.bathrooms.select(br | br.isOutOfOrder)->notEmpty()
    implies
    self.discounts.exists(d | d.label = 'SBOO')


-------------------------------------------------------------------------------
-- DONE                              sboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "SBOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'

context Discount inv sboooPercentage:
    -- In premium residences, SBOO discounts are equal to 25%. For
    -- standard category the discount is of 10%.
    self.label = 'SBOOO'and self.rent.rentedBedrooms.residence.category=Category::premium implies self.percentage=25
    or 
    self.label = 'SBOOO'and self.rent.rentedBedrooms.residence.category=Category::standard implies self.percentage=10

-------------------------------------------------------------------------------
--DONE/TO CHECK                             smokingPremiumPolicy
-------------------------------------------------------------------------------
-- Smoking policy for premium residences.
-- Not easy

context Bedroom inv smokingPremiumPolicy:
    -- In a premium residence a resident that specified that he or she
    -- is non smoker will never ever be place in a smoking room.
    self.residence.category=Category::premium and self.isNonSmoking implies self.occupants->forAll(r | not r.isSmoker)

-------------------------------------------------------------------------------
--DONE TEST-OK-KO                           smokingPrestigePolicy
-------------------------------------------------------------------------------
-- No smoking is prestige.
-- Easy

context Bedroom inv smokingPrestigePolicy:
    -- There are no smoking rooms at all in residence of prestige.
    self.residence.category=Category::prestige implies self.isNonSmoking


-------------------------------------------------------------------------------
--DONE test-ok-ko                              tenantInRentedRoom
-------------------------------------------------------------------------------
-- Room occupied by the tenant.
-- Medium. 

context Tenant inv tenantInRentedRoom:
    -- A tenant occupies one of the bedroom that he or she has rented.
    self.rentedBedrooms->exists(rb|rb.occupants->exists(oc|oc=self))


-------------------------------------------------------------------------------
--DONE test-ok-ko                                tutorAdult
-------------------------------------------------------------------------------
-- Tutors are adults.
-- Easy

context Resident inv tutorAdult:
    -- A resident can't be the tutor of another resident if he or
    -- she is not an adult.
    self.tutors->notEmpty() implies self.age >= 18


-------------------------------------------------------------------------------
-- DONE                              tutorInSameGroup
-------------------------------------------------------------------------------
-- Tutors and tutored in one group.
-- Medium

context Resident inv tutorInSameGroup:
    -- The tutors of a resident are in the same group that this
    -- resident. In other words they are all in the same group of
    -- rooms.
    self.tutors->notEmpty() implies self.occupiedRoom.tenant.rentedBedrooms.occupants->exists(p|p.tutored->exists(p2|p2=self))


-------------------------------------------------------------------------------
-- DONE                    uniqueNumberApartForPrivateBathroom
-------------------------------------------------------------------------------
-- Invariant on room numbering.
-- Medium

context Residence inv uniqueNumberApartForPrivateBathroom:
    -- All rooms have a distinct number, except private bathrooms.
    self.rooms->notEmpty() implies self.bedrooms()->union(self.bathrooms()->reject(b|b.isOnTheLanding=true))->isUnique(number)
